from collections import defaultdict, deque

class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.V = vertices

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs_util(self, v, visited):
        visited[v] = True
        print(v, end=" ")  # Print the visited node
        for i in self.graph[v]:
            if not visited[i]:
                self.dfs_util(i, visited)

    def dfs(self):
        visited = [False] * self.V
        print("DFS traversal starting from node 1:")
        self.dfs_util(1, visited)
        print()

    def bfs(self):
        visited = [False] * self.V
        queue = deque()
        queue.append(1)
        visited[1] = True
        print("BFS traversal starting from node 1:")
        while queue:
            node = queue.popleft()
            print(node, end=" ")
            for i in self.graph[node]:
                if not visited[i]:
                    queue.append(i)
                    visited[i] = True
        print()

    def is_cyclic_util(self, v, visited, parent):
        visited[v] = True
        for i in self.graph[v]:
            if not visited[i]:
                if self.is_cyclic_util(i, visited, v):
                    return True
            elif parent != i:
                return True
        return False

    def is_tree(self):
        visited = [False] * self.V
        if self.is_cyclic_util(0, visited, -1):
            return False
        for i in range(self.V):
            if not visited[i]:
                return False
        return True

# Example usage
g = Graph(5)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 1)
g.add_edge(2, 3)
g.add_edge(3, 4)
g.add_edge(4, 1)
g.add_edge(4, 2)

g.dfs()
g.bfs()

if g.is_tree():
    print("The given graph is a tree.")
else:
    print("The given graph is not a tree.")
